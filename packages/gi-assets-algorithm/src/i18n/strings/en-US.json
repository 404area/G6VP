{
  "gi-assets-algorithm.src.ClusterTable.NodeName": "Node name",
  "gi-assets-algorithm.src.ClusterTable.DownloadCsv": "Download CSV",
  "gi-assets-algorithm.src.CommunityDetection.Component.SetCoreK": "Set core k:",
  "gi-assets-algorithm.src.CommunityDetection.Component.TheGraphInstanceDoesNot": "The graph instance does not exist.",
  "gi-assets-algorithm.src.CommunityDetection.Component.TheCurrentGraphIsConnected": "The current graph is connected as a whole, no non-connected subgraph",
  "gi-assets-algorithm.src.CommunityDetection.Component.ThereAreIsolatedPointOn": "There are isolated point on the current map and will not participate in community division.",
  "gi-assets-algorithm.src.CommunityDetection.Component.CommunityDiscovery": "Community discovery",
  "gi-assets-algorithm.src.CommunityDetection.Component.NoDataAvailable": "No data available",
  "gi-assets-algorithm.src.CommunityDetection.Component.AnalysisResults": "Analysis results",
  "gi-assets-algorithm.src.CommunityDetection.Component.CommunityNumber": "Community number",
  "gi-assets-algorithm.src.CommunityDetection.Component.SelectionAlgorithm": "Selection Algorithm",
  "gi-assets-algorithm.src.CommunityDetection.Component.Analysis": "Analysis",
  "gi-assets-algorithm.src.CommunityDetection.info.CommunityDiscovery": "Community discovery",
  "gi-assets-algorithm.src.CommunityDetection.info.ThroughKCoreLopuvainAnd": "Through K-Core, Lopuvain, and iLouvain",
  "gi-assets-algorithm.src.InfoDetection.Component.IsolatedPoint": "Isolated point",
  "gi-assets-algorithm.src.InfoDetection.Component.Ring": "Ring",
  "gi-assets-algorithm.src.InfoDetection.DegreeScatter.TotalDegree": "Total degree",
  "gi-assets-algorithm.src.InfoDetection.DegreeScatter.Outdegree": "Outdegree",
  "gi-assets-algorithm.src.InfoDetection.DegreeScatter.Penetration": "Penetration",
  "gi-assets-algorithm.src.InfoDetection.DegreeScatter.Degree": "Degree",
  "gi-assets-algorithm.src.InfoDetection.DegreeScatter.Quantity": "Quantity",
  "gi-assets-algorithm.src.InfoDetection.DegreeScatter.DegreeDistribution": "Degree distribution",
  "gi-assets-algorithm.src.InfoDetection.info.InformationDetection": "Information Detection",
  "gi-assets-algorithm.src.InfoDetection.info.DetectIsolatedPointsRingsEtc": "Detect isolated points, rings, etc. in the canvas",
  "gi-assets-algorithm.src.NodeImportance.Component.NoResults": "No results",
  "gi-assets-algorithm.src.NodeImportance.Component.TheGraphInstanceDoesNot": "The graph instance does not exist.",
  "gi-assets-algorithm.src.NodeImportance.Component.NodeImportance": "Node importance",
  "gi-assets-algorithm.src.NodeImportance.Component.AlgorithmAlgorithm": "algorithm {algorithm}",
  "gi-assets-algorithm.src.NodeImportance.Component.Sort": "-Sort",
  "gi-assets-algorithm.src.NodeImportance.Component.Penetration": "Penetration",
  "gi-assets-algorithm.src.NodeImportance.Component.Outdegree": "Outdegree",
  "gi-assets-algorithm.src.NodeImportance.Component.Algorithm": "Algorithm",
  "gi-assets-algorithm.src.NodeImportance.Component.Analysis": "Analysis",
  "gi-assets-algorithm.src.NodeImportance.Component.DownloadCsv": "Download CSV",
  "gi-assets-algorithm.src.NodeImportance.Component.ResultList": "Result List",
  "gi-assets-algorithm.src.NodeImportance.Component.StatisticalChart": "Statistical Chart",
  "gi-assets-algorithm.src.NodeImportance.info.NodeImportance": "Node importance",
  "gi-assets-algorithm.src.NodeImportance.info.ThroughPagerankDegreeCentralityAttributes": "Through PageRank, degree centrality, attributes, etc.",
  "gi-assets-algorithm.src.NodeImportance.propertyContent.CannotBeEmpty": "Cannot be empty",
  "gi-assets-algorithm.src.NodeImportance.propertyContent.Properties": "Properties",
  "gi-assets-algorithm.src.NodeImportance.propertyContent.PleaseSelect": "Please select",
  "gi-assets-algorithm.src.NodeImportance.propertyContent.NoData": "No data",
  "gi-assets-algorithm.src.NodeImportance.propertyContent.CalculationMethod": "Calculation method",
  "gi-assets-algorithm.src.NodeImportance.propertyContent.MappingMethod": "Mapping method",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.DegreeCentrality": "Degree centrality",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.CalculatedBasedOnTheEntity": "Calculated based on the entity's access degree",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.PagerankWebPageSorting": "PageRank web page sorting",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.UsePagerankWebPageSorting": "Use PageRank web page sorting algorithm to calculate",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.NodeAttributeImportance": "Node attribute importance",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.CalculateBasedOnNodeAttribute": "Calculate based on node attribute values",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.ImportanceOfRelationshipAttributes": "Importance of relationship attributes",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.CalculatedBasedOnTheAttributes": "Calculated based on the attributes of node-related relationships",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.Penetration": "Penetration",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.Outdegree": "Outdegree",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.Average": "Average",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.MinimumValue": "Minimum value",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.Maximum": "Maximum",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.Median": "Median",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.Sort": "Sort",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.ApplicableToNumericalType": "Applicable to numerical type",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.Count": "Count",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.ApplicableToEnumeratedTypes": "Applicable to enumerated types",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.PositiveCorrelation": "Positive correlation",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.TheLargerTheValueThe": "The larger the value, the larger the point or edge.",
  "gi-assets-algorithm.src.NodeImportance.registerMeta.TheSmallerTheValueThe": "The smaller the value, the larger the point or edge.",
  "gi-assets-algorithm.src.NodeImportance.resultPlot.ImportanceValue": "Importance value",
  "gi-assets-algorithm.src.NodeImportance.resultPlot.NumberOfNodes": "Number of nodes",
  "gi-assets-algorithm.src.NodeImportance.resultTable.SerialNumber": "Serial Number",
  "gi-assets-algorithm.src.NodeImportance.resultTable.Node": "Node",
  "gi-assets-algorithm.src.NodeImportance.resultTable.Importance": "Importance",
  "gi-assets-algorithm.src.NodeImportance.resultTable.AttributeName": "Attribute name",
  "gi-assets-algorithm.src.NodeImportance.resultTable.CalculationMethod": "Calculation method",
  "gi-assets-algorithm.src.NodeImportance.resultTable.Sort": "Sort",
  "gi-assets-algorithm.src.NodesClustering.Component.CategoryIndex": "Category {index}",
  "gi-assets-algorithm.src.NodesClustering.Component.NodeClustering": "Node clustering",
  "gi-assets-algorithm.src.NodesClustering.Component.AlgorithmNodeclusteringalgo": "Algorithm {nodeClusteringAlgo}",
  "gi-assets-algorithm.src.NodesClustering.Component.NoDataAvailable": "No data available",
  "gi-assets-algorithm.src.NodesClustering.Component.AnalysisResults": "Analysis results",
  "gi-assets-algorithm.src.NodesClustering.Component.Classification": "Classification",
  "gi-assets-algorithm.src.NodesClustering.Component.NodesclusteringalgorithmkmeansAlgorithm": "{NodesClusteringAlgorithmKMeans} algorithm",
  "gi-assets-algorithm.src.NodesClustering.Component.GatherNodesIntoKClusters": "Gather nodes into K clusters based on the distance between nodes",
  "gi-assets-algorithm.src.NodesClustering.Component.SetTheKValue": "Set the k value",
  "gi-assets-algorithm.src.NodesClustering.Component.Analysis": "Analysis",
  "gi-assets-algorithm.src.NodesClustering.info.NodeClustering": "Node clustering",
  "gi-assets-algorithm.src.NodesClustering.info.UseKMeansAlgorithmTo": "Use K-Means algorithm to compute node clustering",
  "gi-assets-algorithm.src.NodesSimilarity.Component.NodeSimilarity": "Node similarity",
  "gi-assets-algorithm.src.NodesSimilarity.Component.AlgorithmSimilarityalgo": "Algorithm {similarityAlgo}",
  "gi-assets-algorithm.src.NodesSimilarity.Component.TheGraphInstanceDoesNot": "The graph instance does not exist.",
  "gi-assets-algorithm.src.NodesSimilarity.Component.TheSeedNodeDoesNot": "The seed node does not exist.",
  "gi-assets-algorithm.src.NodesSimilarity.Component.TheSeedNodeSeednodeidDoes": "The seed node {seedNodeId} does not exist.",
  "gi-assets-algorithm.src.NodesSimilarity.Component.NoDataAvailable": "No data available",
  "gi-assets-algorithm.src.NodesSimilarity.Component.AnalysisResults": "Analysis results",
  "gi-assets-algorithm.src.NodesSimilarity.Component.SelectASeedNode": "Select a seed node",
  "gi-assets-algorithm.src.NodesSimilarity.Component.Analysis": "Analysis",
  "gi-assets-algorithm.src.NodesSimilarity.info.NodeSimilarity": "Node similarity",
  "gi-assets-algorithm.src.NodesSimilarity.info.CosineSimilarityBetweenNodesAnd": "Cosine similarity between nodes and selected seed nodes",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.SerialNumber": "Serial Number",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.NodeName": "Node name",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.NodeId": "Node ID",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.CosineSimilarity": "Cosine similarity",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.DownloadCsv": "Download CSV",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.MaximumValue": "Maximum value:",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.MinimumValue": "Minimum value:",
  "gi-assets-algorithm.src.NodesSimilarity.resultTable.Sort": "Sort",
  "gi-assets-algorithm.src.PatternMatch.Component.Mode": "Mode-1",
  "gi-assets-algorithm.src.PatternMatch.Component.ModeIntialpatterninfomapid": "Mode-{intialPatternInfoMapId}",
  "gi-assets-algorithm.src.PatternMatch.Component.TheCanvasIsInThe": "The canvas is in the selected state. You can select or click subgraph. The selected subgraph will be extracted into the mode. [Press W] Drag and drop canvas",
  "gi-assets-algorithm.src.PatternMatch.Component.Cancel": "Cancel",
  "gi-assets-algorithm.src.PatternMatch.Component.Confirm": "Confirm",
  "gi-assets-algorithm.src.PatternMatch.Component.FailedToCreateTheSchema": "Failed to create the schema. Patterns must be connected",
  "gi-assets-algorithm.src.PatternMatch.Component.FailedToCreateTheSchema.1": "Failed to create the schema. The Hanging Edge cannot exist in the mode.",
  "gi-assets-algorithm.src.PatternMatch.Component.ConfirmToExitTheExtraction": "Confirm to exit the extraction mode",
  "gi-assets-algorithm.src.PatternMatch.Component.IfTheSelectedContentAlready": "If the selected content already exists, exit will not use the selected content as the mode. Are you sure you want to quit?",
  "gi-assets-algorithm.src.PatternMatch.Component.FailedToAddModeThe": "Failed to add mode. The number of modes has reached the upper limit!",
  "gi-assets-algorithm.src.PatternMatch.Component.ModeId": "Mode-{id}",
  "gi-assets-algorithm.src.PatternMatch.Component.TheGraphInstanceDoesNot": "The graph instance does not exist.",
  "gi-assets-algorithm.src.PatternMatch.Component.TheNullPatternCannotBe": "The null pattern cannot be matched!",
  "gi-assets-algorithm.src.PatternMatch.Component.NoMatchFound": "No match found!",
  "gi-assets-algorithm.src.PatternMatch.Component.PatternMatching": "Pattern matching",
  "gi-assets-algorithm.src.PatternMatch.Component.CreateMode": "Create mode",
  "gi-assets-algorithm.src.PatternMatch.Component.CopyMode": "Copy mode-",
  "gi-assets-algorithm.src.PatternMatch.Component.Match": "Match",
  "gi-assets-algorithm.src.PatternMatch.Component.ExportMode": "Export mode",
  "gi-assets-algorithm.src.PatternMatch.StyleConfigPropertyItem.CannotBeEmpty": "Cannot be empty",
  "gi-assets-algorithm.src.PatternMatch.StyleConfigPropertyItem.SelectProperties": "Select Properties",
  "gi-assets-algorithm.src.PatternMatch.StyleConfigPropertyItem.EnterAttributeValues": "Enter attribute values",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.CannotBeEmpty": "Cannot be empty",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.PleaseSelect": "Please select",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.AddAttributes": "Add attributes",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.AttributeCondition": "Attribute condition",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.Optional": "Optional",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.StartingPoint": "Starting point",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.EndPoint": "End point",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.EdgeType": "Edge type",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.SelectTheStartAndEnd": "Select the start and end types first.",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.TheEdgeTypeDoesNot": "The edge type does not exist between the start type and the end type.",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.NodeType": "Node type",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.EditEdge": "Edit edge",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.EditPoint": "Edit point",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.Cancel": "Cancel",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.TheRelationshipTypeCannotBe": "The relationship type cannot be empty.",
  "gi-assets-algorithm.src.PatternMatch.editDrawer.Ok": "OK",
  "gi-assets-algorithm.src.PatternMatch.info.PatternMatching": "Pattern matching",
  "gi-assets-algorithm.src.PatternMatch.info.SelectGraphicalModelToFind": "Select graphical model to find subgraphs with similar structures",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.FailedToSaveTheMode": "Failed to save the mode. The mode cannot be empty. To abandon the editor, click cancel",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.FailedToSaveTheMode.2": "Failed to save the mode and failed to create an edge. Specify the type for all nodes and edges",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.FailedToCreateTheSchema": "Failed to create the schema. Patterns must be connected",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.FailedToCreateAnEdge": "Failed to create an edge. Edge type does not exist between start type {sourceType} and end type {targetType}",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.Cancel": "Cancel",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.Save": "Save",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.AddNode": "Add node",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.SearchNode": "Search node",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.AddTemplate": "Add Template",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.DeleteANode": "Delete a node",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.AddEdge": "Add edge",
  "gi-assets-algorithm.src.PatternMatch.patternEditor.DeleteEdge": "Delete edge",
  "gi-assets-algorithm.src.PatternMatch.patternPane.PleaseUploadDataInJson": "Please upload data in JSON format",
  "gi-assets-algorithm.src.PatternMatch.patternPane.EditMode": "Edit mode",
  "gi-assets-algorithm.src.PatternMatch.patternPane.DragOrClickTheContent": "Drag or click the content from the main graph and extract it as a mode",
  "gi-assets-algorithm.src.PatternMatch.patternPane.ExtractionMode": "Extraction mode",
  "gi-assets-algorithm.src.PatternMatch.patternPane.ImportMode": "Import mode",
  "gi-assets-algorithm.src.PatternMatch.patternPane.DownloadMode": "Download Mode",
  "gi-assets-algorithm.src.PatternMatch.patternPane.BuildMode": "Build Mode",
  "gi-assets-algorithm.src.PatternMatch.patternPane.NoMode": "No mode",
  "gi-assets-algorithm.src.PatternMatch.resultTable.SerialNumber": "Serial Number",
  "gi-assets-algorithm.src.PatternMatch.resultTable.NumberOfNodes": "Number of nodes",
  "gi-assets-algorithm.src.PatternMatch.resultTable.NumberOfEdges": "Number of edges",
  "gi-assets-algorithm.src.PatternMatch.resultTable.PatternMatchingResultList": "Pattern matching result list",
  "gi-assets-algorithm.src.PatternMatch.resultTable.Sort": "Sort",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.TelecomFraudRiskModel": "Telecom fraud risk model 0",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.Transfer": "Transfer",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.TelecomFraudRiskModel.1": "Telecom fraud risk model 1",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.Account": "Account",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.Create": "Create",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.SchemaLibrary": "Schema Library",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.PatternMatching": "Pattern matching",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.Reproduction": "Reproduction",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.ModeSelection": "Mode selection",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.SelectAMode": "Select a mode",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.SelectTheClusterFieldOf": "Select the cluster field of the node",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.SelectAFieldDefaultValue": "Select a field. Default value: unkown",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.SelectTheClusterFieldOf.1": "Select the cluster field of the edge",
  "gi-assets-algorithm.src.PatternMatchSimple.Component.StartMatching": "Start matching",
  "gi-assets-algorithm.src.PatternMatchSimple.PatternMatching": "Pattern matching",
  "gi-assets-algorithm.src.utils.csv.ExportDataCsv": "Export data. csv",
  "gi-assets-algorithm.src.NodesSimilarity.Component.SeedNode": "Seed node",
  "gi-assets-algorithm.src.NodesSimilarity.registerMeta.ListAcquisition": "List acquisition",
  "gi-assets-algorithm.src.NodesSimilarity.registerMeta.CanvasPickup": "Canvas pickup",
  "gi-assets-algorithm.src.NodesSimilarity.registerMeta.ObtainNodeMode": "Obtain node mode",
  "gi-assets-algorithm.src.NodesSimilarity.registerMeta.TagMapping": "Tag Mapping"
}
